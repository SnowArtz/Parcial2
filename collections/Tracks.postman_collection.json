{
	"info": {
		"_postman_id": "a33bff3e-13d3-4385-a464-26eb365d072c",
		"name": "Tracks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14951485"
	},
	"item": [
		{
			"name": "Add an Album",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"album_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Sol de Medianoche\",\r\n    \"caratula\": \"https://ejemplo.com/caratula.jpg\",\r\n    \"fechaLanzamiento\": \"2023-11-25T00:00:00.000Z\",\r\n    \"descripcion\": \"Este álbum captura la esencia del jazz contemporáneo con influencias de música latina, destacando una fusión única de sonidos y ritmos.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/albums",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"track_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Canción Ejemplo\",\r\n    \"duracion\": 240,\r\n    \"album\": {\"id\":\"{{album_id}}\"}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/tracks",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a Track to an Invalid Album",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"No se encontró el album con id dado\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Canción Ejemplo\",\r\n    \"duracion\": 240,\r\n    \"album\": {\"id\":\"00000000-0000-0000-0000-000000000000\"}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/tracks",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add an Invalid Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"   pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La duración del track debe ser un número positivo\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Canción Ejemplo\",\r\n    \"duracion\": -5,\r\n    \"album\": {\"id\":\"{{album_id}}\"}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/tracks",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Tracks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of tracks > ' + 0, function () {\r",
							"   var data = pm.response.json()\r",
							"   pm.expect(data.length).to.greaterThan(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/tracks",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/tracks/{{track_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"tracks",
						"{{track_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an Invalid Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"No se encontró el track con id dado\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/tracks/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"tracks",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:3000/api/v1"
		}
	]
}